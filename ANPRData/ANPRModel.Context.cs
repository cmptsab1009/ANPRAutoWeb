//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ANPRData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbANPREntities : DbContext
    {
        public dbANPREntities()
            : base("name=dbANPREntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblANPRData> tblANPRDatas { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblstate> tblstates { get; set; }
    
        public virtual int getAllANPRData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getAllANPRData");
        }
    
        public virtual int getAllANPRDataByDate(string fromDate, string toDate)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getAllANPRDataByDate", fromDateParameter, toDateParameter);
        }
    
        public virtual int getAllANPRDataByFilter(string license, string dtfrom, string dtTo, string lane, string category, string country, string state, string foreColor, string backColor, string type)
        {
            var licenseParameter = license != null ?
                new ObjectParameter("license", license) :
                new ObjectParameter("license", typeof(string));
    
            var dtfromParameter = dtfrom != null ?
                new ObjectParameter("dtfrom", dtfrom) :
                new ObjectParameter("dtfrom", typeof(string));
    
            var dtToParameter = dtTo != null ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(string));
    
            var laneParameter = lane != null ?
                new ObjectParameter("Lane", lane) :
                new ObjectParameter("Lane", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var foreColorParameter = foreColor != null ?
                new ObjectParameter("foreColor", foreColor) :
                new ObjectParameter("foreColor", typeof(string));
    
            var backColorParameter = backColor != null ?
                new ObjectParameter("backColor", backColor) :
                new ObjectParameter("backColor", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getAllANPRDataByFilter", licenseParameter, dtfromParameter, dtToParameter, laneParameter, categoryParameter, countryParameter, stateParameter, foreColorParameter, backColorParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetCountry_Result> GetCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountry_Result>("GetCountry");
        }
    
        public virtual ObjectResult<string> getCountryByState(string state)
        {
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getCountryByState", stateParameter);
        }
    
        public virtual ObjectResult<GetStateById_Result> GetStateById(Nullable<int> cId)
        {
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStateById_Result>("GetStateById", cIdParameter);
        }
    }
}
